Challenge 1: ----------------------------------------

const createFunction = () => {
  const sayingHello = () => {
    return 'hello';
  }
  return sayingHello;
}
const function1 = createFunction();
function1(); // => should console.log('hello');

Challenge 2: ----------------------------------------

const createFunctionPrinter = (input) => {
  const inputPrinter = () => {
    console.log(input);
  }
  return inputPrinter;
}

const printSample = createFunctionPrinter('sample');
printSample(); // => should console.log('sample');
const printHello = createFunctionPrinter('hello');
printHello(); // => should console.log('hello');

Challenge 3: ----------------------------------------

const addByX = (x) => {
  function doMath(input) {
    return input + x;
  }
  return doMath;
}

const addByTwo = addByX(2);
addByTwo(1); // => should return 3
addByTwo(2); // => should return 4
addByTwo(3); // => should return 5

const addByThree = addByX(3);
addByThree(1); // => should return 4
addByThree(2); // => should return 5

const addByFour = addByX(4);
addByFour(4); // => should return 8
addByFour(5); // => should return 9

Challenge 4: ----------------------------------------

const once = (callback) => {
  let counter = 0;
  let firstResult;
  function inside(value) {
    console.log(counter)
    if (counter == 0) { 
    firstResult = callback(value);
    counter ++;
    }
    else { return firstResult }
    return firstResult;
  }
  return inside;
}

const addByTwo = value => { return value + 2; }

const onceFunc = once(addByTwo);
console.log(onceFunc(4));  // => should log 6
console.log(onceFunc(10));  // => should log 6
console.log(onceFunc(9001));  // => should log 6

Challenge 5: ----------------------------------------

const after = (count, callback) => {
  let counter = 0;
  function inside() {
    counter++;
    if (counter >= count) {
    callback();
    }
  }
  return inside;
}

const called = function() { console.log('hello') };

const afterCalled = after(3, called);

afterCalled(); // => nothing is printed
afterCalled(); // => nothing is printed
afterCalled(); // => 'hello' is printed

Challenge 6: ----------------------------------------

const delay = (callback, timeToWait, message, redSign) => {
  function upperFunc () {
    setTimeout(waiting, timeToWait);
  }
  function waiting() {
  return callback(message);
  }
  return upperFunc;
}

const sayHello = (message) => {console.log(message)}
const calling = delay(sayHello, 3000, 'Hello, thanks for waiting!');

calling();

Challenge 7: ----------------------------------------

const rollCall = names => {
  let counter = 0;
  function returnName() {
    if (counter < names.length) {
      console.log(names[counter]);
      counter ++;
    }
    else (console.log('Everyone accounted for'))
  }
  return returnName;
}

const rollCaller = rollCall(['Victoria', 'Juan', 'Ruth'])
rollCaller() // => should log 'Victoria'
rollCaller() // => should log 'Juan'
rollCaller() // => should log 'Ruth'
rollCaller() // => should log 'Everyone accounted for'

Challenge 8: ----------------------------------------

const cycleIterator = array => {
  let counter = 0;
  function innerFunc() {
    if (counter == array.length) { counter = 0; }
    counter ++;
    return (array[counter-1]);
  }
  return innerFunc;
}

const threeDayWeekend = ['Fri', 'Sat', 'Sun'];
const getDay = cycleIterator(threeDayWeekend);
console.log(getDay()); // => should log 'Fri'
console.log(getDay()); // => should log 'Sat'
console.log(getDay()); // => should log 'Sun'
console.log(getDay()); // => should log 'Fri'
