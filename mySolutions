Challenge 1: ----------------------------------------

const createFunction = () => {
  const sayingHello = () => {
    return 'hello';
  }
  return sayingHello;
}
const function1 = createFunction();
function1(); // => should console.log('hello');

Challenge 2: ----------------------------------------

const createFunctionPrinter = (input) => {
  const inputPrinter = () => {
    console.log(input);
  }
  return inputPrinter;
}

const printSample = createFunctionPrinter('sample');
printSample(); // => should console.log('sample');
const printHello = createFunctionPrinter('hello');
printHello(); // => should console.log('hello');

Challenge 3: ----------------------------------------

const addByX = (x) => {
  function doMath(input) {
    return input + x;
  }
  return doMath;
}

const addByTwo = addByX(2);
addByTwo(1); // => should return 3
addByTwo(2); // => should return 4
addByTwo(3); // => should return 5

const addByThree = addByX(3);
addByThree(1); // => should return 4
addByThree(2); // => should return 5

const addByFour = addByX(4);
addByFour(4); // => should return 8
addByFour(5); // => should return 9

Challenge 4: ----------------------------------------

const once = (callback) => {
  let counter = 0;
  let firstResult;
  function inside(value) {
    console.log(counter)
    if (counter == 0) { 
    firstResult = callback(value);
    counter ++;
    }
    else { return firstResult }
    return firstResult;
  }
  return inside;
}

const addByTwo = value => { return value + 2; }

const onceFunc = once(addByTwo);
console.log(onceFunc(4));  // => should log 6
console.log(onceFunc(10));  // => should log 6
console.log(onceFunc(9001));  // => should log 6

Challenge 5: ----------------------------------------

const after = (count, callback) => {
  let counter = 0;
  function inside() {
    counter++;
    if (counter >= count) {
    callback();
    }
  }
  return inside;
}

const called = function() { console.log('hello') };

const afterCalled = after(3, called);

afterCalled(); // => nothing is printed
afterCalled(); // => nothing is printed
afterCalled(); // => 'hello' is printed

Challenge 6: ----------------------------------------

const delay = (callback, timeToWait, message, redSign) => {
  function upperFunc () {
    setTimeout(waiting, timeToWait);
  }
  function waiting() {
  return callback(message);
  }
  return upperFunc;
}

const sayHello = (message) => {console.log(message)}
const calling = delay(sayHello, 3000, 'Hello, thanks for waiting!');

calling();

Challenge 7: ----------------------------------------

const rollCall = names => {
  let counter = 0;
  function returnName() {
    if (counter < names.length) {
      console.log(names[counter]);
      counter ++;
    }
    else (console.log('Everyone accounted for'))
  } 
  return returnName;
}

const rollCaller = rollCall(['Victoria', 'Juan', 'Ruth'])
rollCaller() // => should log 'Victoria'
rollCaller() // => should log 'Juan'
rollCaller() // => should log 'Ruth'
rollCaller() // => should log 'Everyone accounted for'

Challenge 9: ----------------------------------------

const cycleIterator = array => {
  let counter = 0;
  function innerFunc() {
    if (counter == array.length) { counter = 0; }
    counter ++;
    return (array[counter-1]);
  }
  return innerFunc;
}

const threeDayWeekend = ['Fri', 'Sat', 'Sun'];
const getDay = cycleIterator(threeDayWeekend);
console.log(getDay()); // => should log 'Fri'
console.log(getDay()); // => should log 'Sat'
console.log(getDay()); // => should log 'Sun'
console.log(getDay()); // => should log 'Fri'

Challenge 10: ----------------------------------------

const defineFirstArg = (callback, argument) => {
  function innerFunc(value) {
    return callback(argument, value);
  }
  return innerFunc;
}

const subtract = function(big, small) { return big - small; };
const subFrom20 = defineFirstArg(subtract, 20);
console.log(subFrom20(5)); // => should log 15

Challenge 11: ----------------------------------------

const dateStamp = callback => {
  function returnedFunc(input){
  let myObj = {};
  myObj.date = [callback(input)];
  return myObj;
  }
  return returnedFunc;
}

const stampedMultBy2 = dateStamp(n => n * 2);
console.log(stampedMultBy2(4)); // => should log { date: (today's date), output: 8 }
console.log(stampedMultBy2(6)); // => should log { date: (today's date), output: 12 }

Challenge 12: ----------------------------------------

const censor = () => {
  let arrayOfWords = [];
  let text;
  function returnedFunc(firstStr, secondStr) {
    if (secondStr) {
      arrayOfWords.push(firstStr);
      arrayOfWords.push(secondStr);
    }
    if (!secondStr) {
      console.log(arrayOfWords)
      let text = firstStr;
      for (let i = 0; i < arrayOfWords.length; i+=2) {
        text = text.replace(arrayOfWords[i], arrayOfWords[i+1]);
      }
      return text;
    }
  }
  return returnedFunc;
}

const changeScene = censor();
changeScene('dogs', 'cats');
changeScene('quick', 'slow');
console.log(changeScene('The quick, brown fox jumps over the lazy dogs.')); // => should log 'The slow, brown fox jumps over the lazy cats.'

OR ----------------------------------

const censor = () => {
  let arrayOfWords = [];
  let arrayOfTexts = [];
  function returnedFunc(firstStr, secondStr) {
    if (secondStr) {
      arrayOfWords.push(firstStr);
      arrayOfWords.push(secondStr);
      console.log(arrayOfWords)
    }
    if (!secondStr) {
      arrayOfTexts.push(firstStr);
      for (let i = 0; i < arrayOfWords.length; i+=2) {
        arrayOfTexts.push(arrayOfTexts[i/2].replace(arrayOfWords[i], arrayOfWords[i+1]));
      }
      console.log(arrayOfTexts)
      return arrayOfTexts[arrayOfTexts.length-1];
    }
  }
  return returnedFunc;
}

const changeScene = censor();
changeScene('dogs', 'cats');
changeScene('quick', 'slow');
console.log(changeScene('The quick, brown fox jumps over the lazy dogs.')); // => should log 'The slow, brown fox jumps over the lazy cats.'

Challenge 13: ----------------------------------------

const createSecretHolder = (secretValue) => {
  var object = {};
  object.secret = [secretValue];
  function secretBox() {
    object.getSecret = function() { return object.secret; }
    object.setSecret = function(newSecret) { object.secret = [newSecret]; }
  return object;
  }
  return secretBox();
}

const obj = createSecretHolder(5)

obj.getSecret() // => returns 5
obj.setSecret(2)
obj.getSecret() // => returns 2

Challenge 14: ----------------------------------------

const callTimes = () => {
  let counter = 0;
  function returnedFunc () {
    counter++;
    return counter;
  }
  return returnedFunc;
}

let myNewFunc1 = callTimes();
let myNewFunc2 = callTimes();
myNewFunc1(); // => 1
myNewFunc1(); // => 2
myNewFunc2(); // => 1
myNewFunc2(); // => 2

Challenge 15: ----------------------------------------

const russianRoulette = n => {
  let counter = 0;
  let number = n-1;
  function barrel(reload) {
    
    if (reload == 'pull the trigger') {
      if(counter < number) {
        counter++;
        return 'click';
      }
      if (counter == number) {
        counter++;
        return 'BANG!';
      }
      else { return 'reload to play again'; }
    }
    if (reload == 'reload') {
      counter = 0;
      return 'Gun is realoaded!'
    }
  }
  return barrel;
}

const play = russianRoulette(3);
play('pull the trigger'); // => should log 'click'
play('pull the trigger'); // => should log 'click'
play('pull the trigger'); // => should log 'BANG'
play('pull the trigger'); // => should log 'reload to play again'
play('reload'); // => should log 'Gun is realoaded!'
play('pull the trigger'); // => should log 'click'
play('pull the trigger'); // => should log 'click'
play('pull the trigger'); // => should log 'BANG!'

Challenge 16: ----------------------------------------

const average = () => {
  let counter = 0;
  let totalSum = 0;
  function mathMagic(number) {
    if (!number && counter == 0) {
      return 0;
    }
    else if (number) {
      counter++;
      totalSum += number;
      return totalSum/counter;
    }
    else if (!number) {
      return totalSum/counter;
    }
  }
  return mathMagic;
}

const avgSoFar = average();
console.log(avgSoFar()); // => should log 0
console.log(avgSoFar(4)); // => should log 4
console.log(avgSoFar(8)); // => should log 6
console.log(avgSoFar()); // => should log 6
console.log(avgSoFar(12)); // => should log 8
console.log(avgSoFar()); // => should log 8

Challenge 17: ----------------------------------------

const makeFuncTester = array => {
  function returnedFunc(callback) {
    for (let i = 0; i < array.length; i++) {
      if (callback(array[i][0]) !== array[i][1]) {
        return false;
      }
      else { return true; }
    }
  }
  return returnedFunc;
}

const capLastTestCases = [];
capLastTestCases.push(['hello', 'hellO']);
capLastTestCases.push(['goodbye', 'goodbyE']);
capLastTestCases.push(['howdy', 'howdY']);
const shouldCapitalizeLast = makeFuncTester(capLastTestCases);
const capLastAttempt1 = str => str.toUpperCase();
const capLastAttempt2 = str => str.slice(0, -1) + str.slice(-1).toUpperCase();
console.log(shouldCapitalizeLast(capLastAttempt1)); // => should log false
console.log(shouldCapitalizeLast(capLastAttempt2)); // => should log true

Challenge 18: ----------------------------------------

const makeHistory = number => {
  let arrayOfWords = [];
  function returnedFunc(word) {
    if (word == 'undo' && arrayOfWords.length == 0) {
      return 'nothing to undo';
    }
    else if (word == 'undo') {
      let x = arrayOfWords[arrayOfWords.length-1];
      arrayOfWords.pop();
      return x + ' undone';
    }
    else if (word !== 'undo' && arrayOfWords.length == number){
      arrayOfWords.shift();
      arrayOfWords.push(word);
      let x = arrayOfWords[arrayOfWords.length-1];
      return x + ' done'
    }
    else {
      arrayOfWords.push(word);
      let x = arrayOfWords[arrayOfWords.length-1];
      return x + ' done'
    }
  }
  return returnedFunc;
}

const myActions = makeHistory(2);
console.log(myActions('jump')); // => should log 'jump done'
console.log(myActions('undo')); // => should log 'jump undone'
console.log(myActions('walk')); // => should log 'walk done'
console.log(myActions('code')); // => should log 'code done'
console.log(myActions('pose')); // => should log 'pose done'
console.log(myActions('undo')); // => should log 'pose undone'
console.log(myActions('undo')); // => should log 'code undone'
console.log(myActions('undo')); // => should log 'nothing to undo'

FINAL CHALLENGE: BLACKJACK! ---------------------------------------

const blackJack = (cards) => {
  console.log("Hello, welcome to virtual BlackJack, made by Renato!");
  console.log("The instructions are: type play('draw') to draw a card and play('RESET') to reset the machine!");
  console.log("Good luck and enjoy :)");
  const unchangingDeck = cards;
  let currentDeck = cards;
  let drawnCards = [];
  let currentSum = 0;
  let chanceToFail = 0;
  
  function reset() {
    currentDeck = unchangingDeck;
    drawnCards = [];
    currentSum = 0;
    console.log('Game reseted!')
  }
  
  function passNumberToCurrentSum(input) {
    if (input == 'J') { return 10; }
    if (input == 'Q') { return 10; }
    if (input == 'K') { return 10; }
    if (input == 'A' && currentSum == 10) { return 11; }
    if (input == 'A' && currentSum > 10) { return 1; }
    if (input == 'A' && currentSum < 10) { return 1; }
    else { return input; }
    }
  
  function chanceToFailWithNextCard() {
    let failCounter = 0;
    for (let i = 0; i < currentDeck.length; i++) {
      if ((currentSum + (passNumberToCurrentSum(currentDeck[i]))) > 21) { failCounter ++; }
      }
    chanceToFail = (failCounter/currentDeck.length)*100;
    }
  
    function winLooseOrDraw() {
      if (currentSum < 21) { 
        return console.log('You have drawn the card ' + drawnCards[drawnCards.length-1] + ', your current Sum is: ' + currentSum + ' and the chance of failing on next draw is: ' +                   chanceToFail + '%.');
      }
      if (currentSum == 21) { 
        return console.log('Yaaaaay! 21! Congratulations! If you wanna play again use RESET command!');
      }
      if (currentSum > 21) { 
        return console.log('You\'ve lost!, if you wanna play again use RESET command!') 
      }
    }
  
  function drawCards(word) {
    if (word == 'RESET') {
      return reset();
    }
    
    if (word == 'draw' && currentSum == 21) { 
      return console.log('Yaaaaay! 21! Congratulations! If you wanna play again use RESET command!')
    }
    if (word == 'draw') {
      let randomIndex = (Math.round(Math.random() * (currentDeck.length - 1)));
      let drawnCard = currentDeck.splice(randomIndex, 1);
      drawnCards.push(drawnCard[0]);
      currentSum += passNumberToCurrentSum(drawnCard[0]);
      chanceToFailWithNextCard();
      console.log(currentSum);
      return winLooseOrDraw();
    }
  }
  return drawCards;
}

const playCards = ['A','A','A','A',2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10,'J','J','J','J','Q','Q','Q','Q','K','K','K','K'];

const play = blackJack(playCards);

play('draw');
